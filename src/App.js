import React from 'react';
import './App.css';
import ImageCarousel from "./ImageCarousel";
import CopyText from "./CopyText"
import Dropdown from "./Dropdown"

import KarstenImage from "./images/Karsten.jpg"
import HeimdallSwagger from "./images/HeimdallSwagger.png"
import HeimdallUnity from "./images/HeimdallUnity.gif"
import CubeStats from "./images/CubeStats.png"
import StarforceStats from "./images/StarforceStats.png"
import SpreadsheetEdit from "./images/SpreadsheetEdit.gif"
import SpreadsheetUndoRedo from "./images/SpreadsheetUndoRedo.gif"
import RSSFeed from "./images/RSSFeed.png"

const images = [
    HeimdallSwagger,
    HeimdallUnity,
];

const captions = [
    "Swagger UI documenting the API I created in Entity Framework",
    "A gif of my team member using a json from my API in our in progress unity application",
];

const images2 = [
    SpreadsheetEdit,
    SpreadsheetUndoRedo,
];

const captions2 = [
    "Dynamically editing mathmatic expressions inside the cells.",
    "Undoing/Redoing changes made to the spreadsheet.",
];

const images3 = [
    StarforceStats,
    CubeStats,
];

const captions3 = [
    "Statistical overview of a starforce simulation script.",
    "Statistical overview of a cube simulator script.",
];

const images4 = [
    RSSFeed,
];

const captions4 = [
    "A BuzzFeed RSS Feed loaded into the application",
];

function App() {
    return (
        <div className="App">
            <div className="sidebar">
                <div className="sidebar-content">
                    <img src={KarstenImage} alt="" />
                    <ul>
                        <CopyText />
                        <li><a href="https://www.linkedin.com/in/karstenallison/">LinkedIn</a></li>
                        <li><a href="https://github.com/Karsten-Allison/">GitHub</a></li>
                    </ul>
                </div>
                <div className="belowsidebar">
                    <Dropdown label="Education">
                        <ul>
                            <li><strong>Bachelor of Software Engineering</strong></li>
                            <li>Washington State University, Expected 06/2024</li>
                        </ul>
                        <ul>
                            <li><strong>Associate in Science</strong></li>
                            <li>Edmonds Community College, Awarded 2020</li>
                        </ul>
                    </Dropdown>
                </div>
            </div>
            <div className="main">
                <h3>My Projects</h3>
                <hr />
                <ul>
                    <h3><a href="https://github.com/Karsten-Allison/HeimdallSwaggerTest">Augmented Reality Instruction Assistant</a> (Group: Aug 2022  - In Progress)</h3>
                    <li>
                        This is a collaborative group project for my Design Project Management course. We were assigned by a company to develop a proof-of-concept
                        augmented reality application to help visualize and distribute assembly instructions for their technicians.
                    </li>
                    <li>
                        I personally assumed the responsibility of designing the project's REST API, which serves as the backend of the system.
                        To accomplish this, I used C# Entity Framework and PostgreSQL to establish the Data Access and Business Logic components of the application.
                    </li>
                    <ImageCarousel images={images} captions={captions} />
                </ul>
                <ul>
                    <h3><a href="https://github.com/Karsten-Allison/SpreadSheet">Spreadsheet Application</a> (Individual: Jan 2022 - May 2022)</h3>
                    <li>
                        As part of my Object-Oriented Software Principles coursework, I developed a spreadsheet application using C# Windows Forms .Net UI framework.
                        One of the notable features of the spreadsheet was the ability to evaluate mathematical expressions entered into individual cells.
                        This was accomplished by utilizing an expression tree, which was generated by transforming the expressions to infix notation using a shunting yard algorithm.
                        Additionally, cells that contained either mathematical expressions or numerical values could also be utilized as variables.
                    </li>
                    <li>
                        Furthermore, modifications made to cells, such as alterations in color or text, were treated as commands,
                        and recorded in either an undo or redo stack. This allowed the user the ability to reverse any undesired changes made.
                    </li>
                    <ImageCarousel images={images2} captions={captions2} />
                </ul>
                <ul>
                    <h3><a href="https://github.com/Karsten-Allison/MaplestoryStatistics">Game Data Analytics</a> (Individual: Feb 2023)</h3>
                    <li>
                        Many games, both digital and real, incorporate chance elements into their gameplay to add a levels of uncertainancy and mystery to their outcome.
                        As a fan of gaming and statistics, I used python to simulate two kinds of enchancing systems from an MMORPG I play.
                        To visualize and analyze the results of the simulation, I used various mathematical libraries such as Matplotlib, NumPy, and Pandas.
                    </li>
                    <ImageCarousel images={images3} captions={captions3} />
                </ul>
                <ul>
                    <h3>RSS Feed Reader (Group: Jan 2022 - May 2022)</h3>
                    <li>
                        This class group project involved the creation of an RSS feed reader application using the C# WPF framework.
                        The application was designed to provide users with a range of features, including the ability to view articles through a web view,
                        filter articles by specific keywords or categories, group articles into customized categories, and add map pins for specific articles.
                    </li>
                    <li>
                        The application was developed using the Model-View-ViewModel (MVVM) architectural pattern,
                        which facilitated separation of the application's logic, presentation, and data.
                        The model layer of the application was responsible for handling the application's data, including the RSS feeds and articles,
                        while the view layer was responsible for rendering the application's user interface.
                    </li>
                    <ImageCarousel images={images4} captions={captions4} />
                </ul>
            </div>
        </div>
    );
}

export default App;
